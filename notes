Tip 1: Meet the Dot Command
	>G command increases the indentation from the current line
	.  repeats the last change

Question:	>  command does ?

********************************************************************
Tip 2: Don't Repeat Yourself
	"Two for the Price of One" table
	Compound Command	Equivalent in Longhand	Meaning
	C			c$			change to end
	s			cl			change left one character
	S			^C			change line
	I			^i			insert from begining
	A			$a			append to end
	o			A<CR>			open a line
	O			ko			open a line above

********************************************************************
Tip 3: Take One Step Back, Then Three Forward
	f{char} 	finds character
	;		repeat the last search that f{char} performed
	s		cl: delete the character and enters Insert mode.
			l: left direction(motion)

********************************************************************
Tip 4: Act, Repeat, Reverse
	"Repeatable Actions and how to Reverse Them" table
	Intent				Act			Repeat	Reverse
	Make a change			{edit}			.	u
	Scan line for next character	f{char}/t{char}		;	,	
	Scan line for previous char	F{char}/T{char}		;	,
	Scan document for next match	/pattern<CR>		n	N
	Scan document for pre. match	?pattern<CR>		n	N
	Perform substitution		:s/target/replacement	&	u
	Execute a sequence of changes	qx{changes}q		@x	u

Question: execute a sequence of changes ?
Question: what is /t{char}

********************************************************************
Tip 5: Find and Replace by Hand
	*		/keyword: find the 'keyword' under cursor. Search w/o typing :)

********************************************************************
Tip 6: Meet the Dot Formula
	The Dot Formula says that: 
		"The Ideal: One Keystroke to Move, One Keystroke to Execute"
	Examples:
		Tip 2, press j.
		Tip 3, press ;.
		Tip 5, press n.

********************************************************************
Tip 7: Pause with Your Brush Off the Page
	Quote from book: "Just as painters spend a fraction of their time applying paint,
			programmers spend a fraction of their time composing code. More time
			is spent thinking, reading, and navigating from one part of a codebase to another."

********************************************************************
Tip 8: Chunk Your Undos
	"From the moment we enter Insert mode until we return to Normal mode, everything we type (or delete) counts as a single change."
	Thing goes a bit different if using arror key while in Insert mode!

********************************************************************
Tip 9: Compose Repeatable Changes
	"Vim is optimized for repetition.. We have to be mindful of how we compose our changes"
	Example: Delete a word with daw will be useful for repetition from dot command

********************************************************************
Tip 10: Use Counts to Do Simple Arithmetic
	<C-a>	addition on number (default by 1)
	<C-x>	substraction on number (default by 1)
	
	Example: Cursor on 5, press 10<C-a> return 15.
		 Cursor on 5, press 10<C-x> return -5	
	If the cursor is not positioned on a number, then these commands look ahead for a digit on the current line.
	
	:set nrformats= will cause Vim to treat all numerals as decimal.

********************************************************************
Tip 11: Don't Count If You Can Repeat
	Using count when count is small (<=3), and chunk undo better
	Using repeat is easy, don't have to count since counting is tedious. Can reverse if over-hit dot command.

********************************************************************
Tip 12: Combine and Conquer
	Operator + Motion = Action

	Example: d{motion} like: dl, daw, dap
		 c{motion}
		 y{motion}
		 gU{motion} like: gUl, gUaw, gUap
	
	"Vim's Operator Commands" table:
		Trigger		Effect
		c		Change
		d		Delete
		y		Yank into register
		g~		Swap case
		gu		Make lowercase
		gU		Make uppercase
		>		Shift right
		<		Shift left
		=		Autoindent
		!		Filter {motion} lines through an external program

	When an operator command is invoked in duplicate, it acts upon the current line. 
		Example: dd, yy, gUgU or gUU

	Vim is customizable :)
		Custom Operator - work done by Tim Pope
		Custom Motion - work done by Kana Natsuno

Question: ! what is this ?
Question: Try gg=G to indent the whole file
		
********************************************************************
Tip 13: Make Correction Instantly from Insert Mode
	Keystrokes	Effect
	<C-h>		Delete back one character (backspace)
	<C-w>		Delete back one word
	<C-u>		Delete back to start of line

These keystrokes also used in Vim's command line as well as in the bash shell

********************************************************************
Tip 14: Get Back to Normal Mode
	Keystrokes	Effect
	<Esc>		Switch to Normal Mode
	<C-[>		Switch to Normal Mode
	<C-o>		Switch to Insert Normal Mode

Meet Insert Normal Mode
	"We can fire off a single command, after which we'll be returned to Insert mode immediately."
	Example:
		Type <C-o>zz to redraw the screen with the current line in the middle of the window.

********************************************************************
Tip 15: Paste from a Register Without Leaving Insert Mode
	Yanks a few words into the yank register and use <C-r>{register} to paste to.
	<C-r><C-p>{register} insert text literally and fixes any unintended indentation.

Question: What is <C-r><C-p>{register} ?

********************************************************************
Tip 16: Do Back-of-the Evelope Calculations in Place
	Story: we often use back of the evelope for quick calculation.

	Expression register vs. Yank register:
		Yank register: 	
			The delete and yank commands allow us to set the contents of a register.
			The put command allows us to get the contents of a register.

		Expression register:
			allows us to perform calculations; address by = symbol -> accessed by <C-r>=
			
********************************************************************
Tip 17: Insert Unusual Characters by Character Code
	Keystrokes		Effect
	<C-v>{123}		Insert character by decimal code
	<C-v>u{1234}		Insert character by hexadecimal code
	<C-v>{nondigit}		Insert nondigit literally
	<C-k>{char1}{char2}	Insert character represented by {char1}{char2} digraph
	ga			reveal the numeric code for any character
	
Idea: might be very useful to insert a catchy symbol in resume.

********************************************************************
Tip 18: Insert Unusual Characters by Digraph
	Digraph: pair of characters that are easy to remember. For example:
		Character	Keystrokes
		¿ 		<C-k>?I 
		½		<C-k>12
		¾		<C-k>34	
		©		<C-k>Co

	:h digraph-table
	:h digraphs-default

********************************************************************
Tip 19: Overwrite Existing Text with Replace Mode
	"Replace Mode is identical to Insert mode, except that it overwrites existing text in the document"
		Access: R 
			<Insert> key to toggle between Insert mode and Replace mode
	"Virtual Replace Mode treats the tabe character as though it considered of spaces"
		
	Keystrokes	Effect
	r{char}		overwrite a single character (Replace mode) before switching back to Normal mode
	gr{char}	overwrite a single character (Virtual Replace mode) before switching back to Normal mode 

********************************************************************
Tip 20: Grok Visual Mode
	Many command works on Normal mode also work the same in Visual Mode
	h j k l		moving the cursor
	f{char} ; ,	finding character
	/ n N		search for pattern

	The cursor moves -> change the bouds of the selection
	Vim visual mode			     vs. 	Normal mode

	making the selection 				trigger the change command c
	then trigger the change command	 c		specify the range

	viw		selecting the word
	
	?: Select mode
	?: Why finding a character is useful?
		
********************************************************************
Tip 21: Define a Visual Selection
	Enter three visual submodes or get back to Normal mode:		Command
		-character-wise visual mode				v
		-line-wise visual mode					V
		-block-wise visual mode					<C-v>
	Re-selecting the last visual selection				gv
	Switch to Normal mode						<Esc> or <C-[>
	Go to other end of highlighted text				o
	Moving cursor around word as the same to Normal mode		b,e,w

********************************************************************
Tip 22: Repeat Line-Wise Visual Commands
	Using dot command to repeat the previous action on a line
	
	To make < and > commands work properly, configure Vim with
		:set shiftwidth=4 softtabstop=4 expandtab
	Don't use dot command with line-wise visual submode	
